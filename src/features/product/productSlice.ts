import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, } from '../../app/store';


export interface ProductState {
}

const initialState: ProductState = {
};


// export const incrementAsync = createAsyncThunk(
//   'product/fetchCount',
//   async (id: number) => {
//     const response = await fetchProduct({ id });
//     
//     console.log(response);
//   }
// );

export const productSlice = createSlice({
  name: 'product',
  initialState,
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {

  },
});

export const {  } = productSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.product.value)`
// export const selectProducts = (state: RootState) => state.product.list;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default productSlice.reducer;
